    
    
@ВПроекте
структура ParsingTemplate
    обз пер regv: Образец
    обз пер repl: Строка

    статический метод from(regv: Образец, repl: Строка): ParsingTemplate
        возврат новый ParsingTemplate(regv,repl)
    ; 

	метод parse(Источник: Строка): Строка
        //знч Результат = Источник.Заменить(regv, repl) 
        знч Ш = regv.ВСтроку()+"(?im)"
        знч Обр = новый Образец(Ш)
        знч Результат = " %Источник ".Заменить(Обр, repl).Сократить() 
        если Результат!=Источник.Сократить()
                 
        //    Сообщить(Результат)
        ;    
        возврат Результат
	;

;


@ВПроекте
метод Разобрать(Данные: Массив<ParsingTemplate>, Источник: Строка): Строка
    пер Рез = Источник
    для Элемент из Данные  
        Рез = Элемент.parse(Рез)    
    ;
    возврат Рез
;

@ВПроекте
метод Разобрать(Источник: Строка): Строка
    возврат Разобрать(all_values(),Источник)
;


@ВПроекте
метод def_arr(): Массив<ParsingTemplate>
    возврат [новый ParsingTemplate('в выходной', " в субботу ")]
;

@ВПроекте
метод string_representations_of_number(): Массив<ParsingTemplate>
    возврат  
    [
        // Перед строкой источником не должно быть пробелов - обрабатываются при получении значений

        //:%s/\v\(r\"\((.*)\",/('\1',
        
        // одиночные числа
        новый ParsingTemplate('ноль', " 0 "),
        новый ParsingTemplate('нуль', " 0 "),
        новый ParsingTemplate('один', " 1 "),
        новый ParsingTemplate('одна', " 1 "),
        новый ParsingTemplate('одну', " 1 "),
        новый ParsingTemplate('одной', " 1 "),
        новый ParsingTemplate('два', " 2 "),
        новый ParsingTemplate('две', " 2 "),
        новый ParsingTemplate('двух', " 2 "),
        новый ParsingTemplate('три', " 3 "),
        новый ParsingTemplate('трех', " 3 "),
        новый ParsingTemplate('четыре', " 4 "),
        новый ParsingTemplate('четырех', " 4 "),
        новый ParsingTemplate('пять', " 5 "),
        новый ParsingTemplate('пяти', " 5 "),
        новый ParsingTemplate('шесть', " 6 "),
        новый ParsingTemplate('шести', " 6 "),
        новый ParsingTemplate('семь', " 7 "),
        новый ParsingTemplate('семи', " 7 "),
        новый ParsingTemplate('восемь', " 8 "),
        новый ParsingTemplate('восьми', " 8 "),
        новый ParsingTemplate('девять', " 9 "),
        новый ParsingTemplate('девяти', " 9 "),
        новый ParsingTemplate('(минуту\s+|минуты\s+|минут\s+)первого', " $1 1-го "),
        новый ParsingTemplate('(минуту\s+|минуты\s+|минут\s+)второго', " $1 2-го "),
        новый ParsingTemplate('(минуту\s+|минуты\s+|минут\s+)третьего', " $1 3-го "),
        новый ParsingTemplate('(минуту\s+|минуты\s+|минут\s+)четвертого', " $1 4-го "),
        новый ParsingTemplate('(минуту\s+|минуты\s+|минут\s+)пятого', " $1 5-го "),
        новый ParsingTemplate('(минуту\s+|минуты\s+|минут\s+)шестого', " $1 6-го "),
        новый ParsingTemplate('(минуту\s+|минуты\s+|минут\s+)седьмого', " $1 7-го "),
        новый ParsingTemplate('(минуту\s+|минуты\s+|минут\s+)восьмого', " $1 8-го "),
        новый ParsingTemplate('(минуту\s+|минуты\s+|минут\s+)девятого', " $1 9-го "),
        новый ParsingTemplate('(минуту\s+|минуты\s+|минут\s+)десятого', " $1 10-го "),
        новый ParsingTemplate('(минуту\s+|минуты\s+|минут\s+)одиннадцатого', " $1 11-го "),
        новый ParsingTemplate('(минуту\s+|минуты\s+|минут\s+)двенадцатого', " $1 12-го "),
        новый ParsingTemplate('перво(?:е|го)', " 1 "),
        новый ParsingTemplate('первый', " 1 "),
        новый ParsingTemplate('первую', " 1 "),
        новый ParsingTemplate('второ(?:е|й|го)', " 2 "),
        новый ParsingTemplate('вторую', " 2 "),
        новый ParsingTemplate('треть(?:е|ю|его)', " 3 "),
        новый ParsingTemplate('третий', " 3 "),
        новый ParsingTemplate('четверто(?:е|го)', " 4 "),
        новый ParsingTemplate('четвертый', " 4 "),
        новый ParsingTemplate('четвертую', " 4 "),
        новый ParsingTemplate('пято(?:е|го)', " 5 "),
        новый ParsingTemplate('пятый', " 5 "),
        новый ParsingTemplate('пятую', " 5 "),
        новый ParsingTemplate('шесто(?:е|й|го)', " 6 "),
        новый ParsingTemplate('шестую', " 6 "),
        новый ParsingTemplate('седьмо(?:е|й|го)', " 7 "),
        новый ParsingTemplate('седьмую', " 7 "),
        новый ParsingTemplate('восьмо(?:е|й|го)', " 8 "),
        новый ParsingTemplate('восьмую', " 8 "),
        новый ParsingTemplate('девято(?:е|го)', " 9 "),
        новый ParsingTemplate('девятый', " 9 "),
        новый ParsingTemplate('девятую', " 9 "),
        // 10-19
        новый ParsingTemplate('десять', " 10 "),
        новый ParsingTemplate('десяти', " 10 "),
        новый ParsingTemplate('десято(?:е|го)', " 10 "),
        новый ParsingTemplate('одиннадцат(?:ь|ое|ого|и)', " 11 "),
        новый ParsingTemplate('двенадцат(?:ь|ое|ого|и)', " 12 "),
        новый ParsingTemplate('тринадцат(?:ь|ое|ого|и)', " 13 "),
        новый ParsingTemplate('четырнадцат(?:ь|ое|ого|и)', " 14 "),
        новый ParsingTemplate('пятнадцат(?:ь|ое|ого|и)', " 15 "),
        новый ParsingTemplate('шестнадцат(?:ь|ое|ого|и)', " 16 "),
        новый ParsingTemplate('семнадцат(?:ь|ое|ого|и)', " 17 "),
        новый ParsingTemplate('восемнадцат(?:ь|ое|ого|и)', " 18 "),
        новый ParsingTemplate('девятнадцат(?:ь|ое|ого|и)', " 19 "),
        // для десятками уже идут преобразованные числа
        новый ParsingTemplate('двадцать\s+([1-9])', " 2$1 "),
        новый ParsingTemplate('двадцати\s+([1-9])', " 2$1 "),
        новый ParsingTemplate('тридцать\s+([1-9])', " 3$1 "),
        новый ParsingTemplate('сорок\s+([1-9])', " 4$1 "),
        новый ParsingTemplate('пятьдесят\s+([1-9])', " 5$1 "),
        новый ParsingTemplate('шестьдесят\s+([1-9])', " 6$1 "),
        новый ParsingTemplate('семьдесят\s+([1-9])', " 7$1 "),
        новый ParsingTemplate('восемьдесят\s+([1-9])', " 8$1 "),
        новый ParsingTemplate('девяносто\s+([1-9])', " 9$1 "),
        новый ParsingTemplate('двадцат(?:ь|и|ое|ого)', " 20 "),
        новый ParsingTemplate('тридцат(?:ь|и|ое|ого)', " 30 "),
        новый ParsingTemplate('соро(?:к|а|ковое|кового)', " 40 "),
        новый ParsingTemplate('пятьдесят ', " 50 "),
        новый ParsingTemplate('пятидеся(?:ти|тое|того)', " 50 "),
        новый ParsingTemplate('шестьдесят ', " 60 "),
        новый ParsingTemplate('шестидеся(?:ти|тое|того)', " 60 "),
        новый ParsingTemplate('семьдесят ', " 70 "),
        новый ParsingTemplate('семидеся(?:ти|тое|того)', " 70 "),
        новый ParsingTemplate('восемьдесят', " 80 "),
        новый ParsingTemplate('восьмидеся(?:ти|тое|того)', " 80 "),
        новый ParsingTemplate('девяност(?:о|ое|ого)', " 90 "),
        // для сотнями уже идут преобразованные числа
        новый ParsingTemplate('сто\s+([0-9][0-9])', " 1$1 "),
        новый ParsingTemplate('сто\s+([0-9])', " 10$1 "),
        новый ParsingTemplate('(?:сто|ста|сотого)', " 100 "),
        новый ParsingTemplate('двести\s+([0-9][0-9])', " 2$1 "),
        новый ParsingTemplate('двести\s+([0-9])', " 20$1 "),
        новый ParsingTemplate('(?:двести|двухсот|двухсотого)', " 200 "),
        новый ParsingTemplate('триста\s+([0-9][0-9])', " 3$1 "),
        новый ParsingTemplate('триста\s+([0-9])', " 30$1 "),
        новый ParsingTemplate('(?:триста|трехсот|трехсотого)', " 300 "),
        новый ParsingTemplate('четыреста\s+([0-9][0-9])', " 4$1 "),
        новый ParsingTemplate('четыреста\s+([0-9])', " 40$1 "),
        новый ParsingTemplate('(?:четыреста|четырехсот|четырехсотого)', " 400 "),
        новый ParsingTemplate('пятьсот\s+([0-9][0-9])', " 5$1 "),
        новый ParsingTemplate('пятьсот\s+([0-9])', " 50$1 "),
        новый ParsingTemplate('(?:пятьсот|пятиста|пятисотого)', " 500 "),
        новый ParsingTemplate('шестьсот\s+([0-9][0-9])', " 6$1 "),
        новый ParsingTemplate('шестьсот\s+([0-9])', " 60$1 "),
        новый ParsingTemplate('(?:шестьсот|шестиста|шестисотого)', " 600 "),
        новый ParsingTemplate('семьсот\s+([0-9][0-9])', " 7$1 "),
        новый ParsingTemplate('семьсот\s+([0-9])', " 70$1 "),
        новый ParsingTemplate('(?:семьсот|семиста|семисотого)', " 700 "),
        новый ParsingTemplate('восемьсот\s+([0-9][0-9])', " 8$1 "),
        новый ParsingTemplate('восемьсот\s+([0-9])', " 80$1 "),
        новый ParsingTemplate('(?:восемьсот|восьмиста|восьмисотого)', " 800 "),
        новый ParsingTemplate('девятьсот\s+([0-9][0-9])', " 9$1 "),
        новый ParsingTemplate('девятьсот\s+([0-9])', " 90$1 "),
        новый ParsingTemplate('(?:девятьсот|lдевятиста|девятисотого)', " 900 "),
        // из тысяч - только 2
        новый ParsingTemplate('(?:2|две)\s+?тысячи\s+(\d\d)', " 20$1 "),
        // месяцы
        новый ParsingTemplate('янв.*?', " `n01` "),
        новый ParsingTemplate('фев.*?', " `n02` "),
        новый ParsingTemplate('март.*?', " `n03` "),
        новый ParsingTemplate('апр.*?', " `n04` "),
        новый ParsingTemplate('мая ', " `n05` "),
        новый ParsingTemplate('июн.*?', " `n06` "),
        новый ParsingTemplate('июл.*?', " `n07` "),
        новый ParsingTemplate('авг.*?', " `n08` "),
        новый ParsingTemplate('сент.*?', " `n09` "),
        новый ParsingTemplate('окт.*?', " `n10` "),
        новый ParsingTemplate('ноя.*?', " `n11` "),
        новый ParsingTemplate('дек.*?', " `n12` "),
        // Разделители уберем
        новый ParsingTemplate(',', " "),
        новый ParsingTemplate(';', " "),
        новый ParsingTemplate('\sи\s', " ") // слово 'и' можно спокойно убрать везде
        //новый ParsingTemplate('([^0-9])\s*(\.|\-|:|;|,)\s+(?![0-9])', "$1 ") // некоторые разделители можем убрать, если они не между чисел
    ]
;

@ВПроекте
метод string_representations_values(): Массив<ParsingTemplate>
    пер ВозвИтог = новый Массив<ParsingTemplate>()
    
    пер М1: Массив<ParsingTemplate>  = этот.string_representations_of_number()
    для Элемент из этот.def_arr()
        М1.Добавить(Элемент)
    ;

    для Элемент из  М1
        знч СтарОбразец = Элемент.regv
        пер НовОбразец = новый Образец("(?:\\s)%СтарОбразец(?=,|:|;|\\-|\\.|\\s|$)")
        ВозвИтог.Добавить(новый ParsingTemplate(НовОбразец, Элемент.repl))
    ;

    возврат ВозвИтог    
;

@ВПроекте
метод preprocess_values(): Массив<ParsingTemplate> 
    возврат [
        // сначала уберем строки в двойных скобках - это разбирать не надо. тупо вызовем несколько раз
        новый ParsingTemplate('<<[^<>]*?>>', " "),
        новый ParsingTemplate('<<[^<>]*?>>', " "),
        новый ParsingTemplate('<<[^<>]*?>>', " "),
        новый ParsingTemplate('<<[^<>]*?>>', " "),
        новый ParsingTemplate('<<[^<>]*?>>', " "),

        новый ParsingTemplate('\?', " "), // этот разделитель можно убрать всегда
        новый ParsingTemplate('!', " "), // этот разделитель можно убрать всегда
        новый ParsingTemplate(',', " "), // этот разделитель можно убрать всегда
        новый ParsingTemplate(';', " "), // этот разделитель можно убрать всегда
        новый ParsingTemplate('([^0-9])\s*(\.|\-|:|;|,)\s+(?![0-9])', "$1 "), // некоторые разделители можем убрать, если они не между чисел

        новый ParsingTemplate(' спустя ', " через "),
        новый ParsingTemplate(' полчаса ', " 30 минут "),
        новый ParsingTemplate(' в час ', " в 1 час "),
        новый ParsingTemplate(' через час ', " через 1 час "),
        новый ParsingTemplate(' через полтора часа ', " через 90 минут "),
        новый ParsingTemplate(' через минуту ', " через 1 минуту "),
        новый ParsingTemplate(' через сутки ', " через 24 часа "),
        новый ParsingTemplate(' через день ', " через 1 день "),
        новый ParsingTemplate(' через неделю ', " через 1 неделю "),
        новый ParsingTemplate(' через месяц ', " через 1 месяц "),
        новый ParsingTemplate(' через год ', " через 1 год "),
        новый ParsingTemplate(' без четверти ', " без 15 "),
        новый ParsingTemplate('после завтра', "послезавтра"), // на случай ошибки
        новый ParsingTemplate('после послезавтра', "послепослезавтра"), // на случай ошибки
        новый ParsingTemplate('понеделник', "понедельник"), // на случай ошибки
        новый ParsingTemplate('ё', "е"),
        новый ParsingTemplate('первова ', " первого "), // подарок неграмотной молодежи
        новый ParsingTemplate('второва ', " второго "),
        новый ParsingTemplate('третьева ', " третьего "),
        новый ParsingTemplate('четвертова ', " четвертого "),
        новый ParsingTemplate('пятова ', " пятого "),
        новый ParsingTemplate('шестова ', " шестого "),
        новый ParsingTemplate('седьмова ', " седьмого "),
        новый ParsingTemplate('восьмова ', " восьмого "),
        новый ParsingTemplate('девятова ', " девятого "),
        новый ParsingTemplate('десятова ', " десятого "),
        новый ParsingTemplate('одиннадцатова ', " одиннадцатого "),
        новый ParsingTemplate('двенадцатова ', " двенадцатого "),
        новый ParsingTemplate('тринадцатова ', " тринадцатого "),
        новый ParsingTemplate('четырнадцатова ', " четырнадцатого "),
        новый ParsingTemplate('пятнадцатова ', " пятнадцатого "),
        новый ParsingTemplate('шестнадцатова ', " шестнадцатого "),
        новый ParsingTemplate('семнадцатова ', " семнадцатого "),
        новый ParsingTemplate('восемнадцатова ', " восемнадцатого "),
        новый ParsingTemplate('девятнадцатова ', " девятнадцатого "), // подарок неграмотной молодежи
        новый ParsingTemplate(' в этот ', " в "), // Уберем слова в этот, в эта, в эти
        новый ParsingTemplate(' в эту ', " в "),  // Уберем слова в этот, в эта, в эти
        новый ParsingTemplate(' в эти ', " в "),  // Уберем слова в этот, в эта, в эти
        новый ParsingTemplate('ближайш(?<G1>ий|ие|ей|ую|ее|его)', "следующ$<G1>"), // синонимы, используем именованную группу G1
        новый ParsingTemplate('(.*)\s+следующ(?<G1>ий|ие|ую|ей|ее|его)\s+(.*) ',"$1 `b` $3"), // Уберем слова следующ..., вместо него будет `b` - признак начала периода
        новый ParsingTemplate(' на выходных ', " в выходной "),
        новый ParsingTemplate(' в выходные ', " в выходной "),
        новый ParsingTemplate('\s(?:в\s+)?пол(?<G1>пе|вт|тр|че|пя|ше|се|во|де|од|дв)'," в половину $<G1>")
    ]
;

@ВПроекте
метод postprocess_values(): Массив<ParsingTemplate> 
    возврат [
        новый ParsingTemplate('([^0-9])\s*(\.|\-|:|;|,)\s+(?![0-9])', "$1 "), // еще раз пытаемся убрать разделители, вместо строк могли оказаться числа

        // Общие замены в начале
        новый ParsingTemplate('без (\d+?) час', "без $1 1 час"),
        
        новый ParsingTemplate('(.*)(\sполдень\s|\sполудня\s)(.*)', "`sd` $1 12 часов $3"),
        новый ParsingTemplate('(.*)(\sполночь\s|\sдо\s+полуночи\s)(.*)',"`sn` $1 12 часов $3"),
        // Отступы от сегодня
        новый ParsingTemplate(' послепослезавтра ', " `bd` `+d3` "),
        новый ParsingTemplate(' послезавтра ', " `bd` `+d2` "),
        новый ParsingTemplate(' завтра ', " `bd` `+d1` "),
        // Анализ конкретной даты СЛЕДУЩ... = `b`
        новый ParsingTemplate('(.*)\s`b`\s*(\sгод\s|\sгода\s|\sлет\s)(.*)',"$1 `by` `+y1` $3 "),
        новый ParsingTemplate('(.*)\s`b`\s*(\sмесяц\s|\sмесяца\s|\sмесяцев\s)(.*)',"$1 `bn` `+n1` $3 "),
        новый ParsingTemplate('(.*)\s`b`\s*(\sнеделе\s|\sнеделю\s|\sнедели\s|\sнедель\s)(.*)',"$1 `bw` `+w1` $3 "),
        новый ParsingTemplate('(.*)\s`b`\s*(\sдень\s|\sдня\s|\sдней\s)(.*)',"$1 `bd` `+d1` $3 "),
        // Анализируем ЧЕРЕЗ
        // Анализ конкретной даты ЧЕРЕЗ, передвигаем в конец, чтобы использовать несколько раз
        новый ParsingTemplate('(.*)\sчерез\s+(и\s)?(\d+)\s*(\sгод\s|\sгода\s|\sлет\s)(.*)',"$1 `+y$3` через $5 "),
        новый ParsingTemplate('(.*)\s+через\s+(и\s)?(\d+)\s*(\sмесяц\s|\sмесяца\s|\sмесяцев\s)(.*)',"$1 `+n$3` через $5 "),
        новый ParsingTemplate('(.*)\sчерез\s+(и\s)?(\d+)\s*(\sнеделю\s|\sнедели\s|\sнедель\s)(.*)',"$1 `+w$3` через $5 "),
        новый ParsingTemplate('(.*)\sчерез\s+(и\s)?(\d+)\s*(\sдень\s|\sдня\s|\sдней\s)(.*)',"$1 `+d$3` через $5 "),
        //через дни недели
        новый ParsingTemplate('\sчерез\s(\d+\s+)?понедельник(?:а)?', " `+wda$1` "),
        новый ParsingTemplate('\sчерез\s(\d+\s+)?вторник(?:а)?', " `+wdb$1` "),
        новый ParsingTemplate('\sчерез\s(\d+\s+)?сред[уаы]', " `+wdc$1` "),
        новый ParsingTemplate('\sчерез\s(\d+\s+)?четверг(?:а)?', " `+wdd$1` "),
        новый ParsingTemplate('\sчерез\s(\d+\s+)?пятниц[уаы]', " `+wde$1` "),
        новый ParsingTemplate('\sчерез\s(\d+\s+)?суббот[уаы]', " `+wdf$1` "),
        новый ParsingTemplate('\sчерез\s(\d+\s+)?воскресень[ея]', " `+wdg$1` "),
        // Анализ конкретного времени СЛЕДУЮЩ...
        новый ParsingTemplate('(.*)\s`b`\s*(\sчас\s|\sчаса\s|\sчасов\s)(.*)',"$1 `bh` `+h1` $3 "), // представление времени только в часах

        новый ParsingTemplate('(.*)\s+с\s+половиной\s+(час|часа|часов)\s+(.*)', "$1 $2 30 минут $3"), // часы с половиной

        // Анализ конкретного времени ЧЕРЕЗ
        новый ParsingTemplate('(.*)\sчерез\s+([0-9]?[0-9]?[0-9])\s*(\sчас\s|\sчаса\s|\sчасов\s)\s*(?:и\s)?([0-9]?[0-9]?[0-9])\s*(\sминут\s|\sминуту\s)(.*)',"$1 `+h$2` `+m$4` через $6"), // представление времени в часах, минутах
        новый ParsingTemplate('(.*)\sчерез\s+([0-9]?[0-9]?[0-9])\s*(\sминут\s|\sминуту\s)\s*(?:и\s)?([0-9]?[0-9]?[0-9])\s*(\sчас\s|\sчаса\s|\sчасов\s)(.*)',"$1 `+h$2` `+m$4` через $6"), // представление времени в минутах, часах
        новый ParsingTemplate('(.*)\sчерез\s+([0-2]?[0-9])(:|\s)\s?([0-5])\s*([0-9])(.*)',"$1  `+h$2` `+m$4$5` через $6"), // представление времени в формате ЧЧ ММ, минуты указываются всегда в виде 2 знаков
        новый ParsingTemplate('(.*)\sчерез\s+([0-2]?[0-9])\s*(\sчас\s|\sчаса\s|\sчасов\s)(.*)',"$1  `+h$2` `+m00` через $4"), // представление времени только в часах
        новый ParsingTemplate('(.*)\sчерез\s+(\d+)\s*(\sминуту\s|\sминут\s|\sминуты\s)(.*)',"$1  `+m$2` через $4"), // представление времени только в минутах
        
        // Анализ конкретного времени
        новый ParsingTemplate('(.*)\s(\d+)(\s*минуту\s+|\s*минуты\s+|\s*минут\s+)после\s+([0-2]?[0-9])(.*)',"$1 `+m$2` `h$4` $5"), // минуты после часов
        новый ParsingTemplate('(.*)(час|часа|часов)\s+с четвертью\s(.*)',"$1$2 15 минут $3"), // часы с четвертью
        новый ParsingTemplate('(.*)\s+в\s+четверть\s+([0-2]?[0-9])\s+(.*)',"$1 `-m45` в $2 часов $3"), // в четверть часов
        новый ParsingTemplate('(.*)\s+в\s+половин(?:е|у)\s+([0-2]?[0-9])\s+(.*)',"$1 `-m30` в $2 часов $3"), // в половине часов
        новый ParsingTemplate('(.*)\s([0-5]?[0-9])(\s*минуту\s+|\s*минуты\s+|\s*минут\s+)([0-1]?[0-9])-го\s(.*)',"$1 `-h1` `m$2` `h$4` $5"), // N минут h-го
        новый ParsingTemplate('(.*)(?:\sбез\s|\sза\s)s*([0-2]?[0-9])(\s+|\s+минуты\s+|\s+минут\s+)([0-2]?[0-9])(.*)',"$1 `-m$2` в $4 часов $5"), // без|за N минут записывается в спец.формате `-mN`
        новый ParsingTemplate('(.*)\s+(час|часа|часов)\s+и\s+([0-5]?[0-9])\s*(минут)(.*)',"$1 $2 $3 $4$5"), // часов и N минут - уберем "и"
        новый ParsingTemplate('(.*)\sв\s+([0-2]?[0-9])\s*(\sчас\s|\sчаса\s|\sчасов\s)\s*([0-5]?[0-9])\s*(\sминут\s|\sминуту\s)(.*)',"$1 `h$2` `m$4` $6"), // представление времени в часах, минутах
        новый ParsingTemplate('(.*)[^в]\s+([0-2]?[0-9]:[0-5][0-9])(.*)',"$1 в $2 $3"), // если это точно время ч:мм - можно даже обойтись без в, добавим автоматически       
        новый ParsingTemplate('(.*)\sв\s+([0-2]?[0-9])(:|\s)\s?([0-5])\s*([0-9])(.*)',"$1 `h$2` `m$4$5` $6"), // представление времени в формате ЧЧ ММ, минуты указываются всегда в виде 2 знаков
        новый ParsingTemplate('(.*?)(?:\sв)?\s+([0-2]?[0-9])\s*(\sутра\s|\sвечера\s)(.*)',"$1 в $2 часов $3 $4"), // вместо часов слово утра или вечера, здесь префикс "в" не обязателен
        //новый ParsingTemplate('(.*)\sв\s+([0-2]?[0-9])\s*(\sутра\s|\sвечера\s)(.*)',"$1 в $2 часов $3 $4"), // вместо часов слово утра или вечера, здесь префикс "в" указан
        новый ParsingTemplate('(.*)\sв\s+([0-2]?[0-9])\s*(\sчас\s|\sчаса\s|\sчасов\s)(.*)',"$1 `h$2` $4"), // представление времени только в часах
        
        
        // Анализ конкретных дат
        // Указание дня недели
        // сначала последние, будет так же работать <<ближайший последний>> и <<последний ближайший>>
        новый ParsingTemplate('\s(?:в)(?:\s*`b`\s*)?\s*последний\s*(?:\s*`b`\s*)?\s*понедельник '," `wda5` "),
        новый ParsingTemplate('\s(?:в)(?:\s*`b`\s*)?\s*последний\s*(?:\s*`b`\s*)?\s*вторник '," `wdb5` "),
        новый ParsingTemplate('\s(?:в)(?:\s*`b`\s*)?\s*последнюю\s*(?:\s*`b`\s*)?\s*среду '," `wdc5` "),
        новый ParsingTemplate('\s(?:в)(?:\s*`b`\s*)?\s*последний\s*(?:\s*`b`\s*)?\s*четверг '," `wdd5` "),
        новый ParsingTemplate('\s(?:в)(?:\s*`b`\s*)?\s*последнюю\s*(?:\s*`b`\s*)?\s*пятницу '," `wde5` "),
        новый ParsingTemplate('\s(?:в)(?:\s*`b`\s*)?\s*последнюю\s*(?:\s*`b`\s*)?\s*субботу '," `wdf5` "),
        новый ParsingTemplate('\s(?:в)(?:\s*`b`\s*)?\s*последнее\s*(?:\s*`b`\s*)?\s*воскресенье '," `wdg5` "),
        
        // дни недели с номером       
        // можем сделать префикс "в" необязательным 
        новый ParsingTemplate('\s(?:в|во)?(?:\s*`b`\s*)?\s*([1-5])?\s*понедельник '," `wda$1` "),
        новый ParsingTemplate('\s(?:в|во)?(?:\s*`b`\s*)?\s*([1-5])?\s*вторник '," `wdb$1` "),
        новый ParsingTemplate('\s(?:в|во)?(?:\s*`b`\s*)?\s*([1-5])?\s*сред[у|а] ', " `wdc$1` "),
        новый ParsingTemplate('\s(?:в|во)?(?:\s*`b`\s*)?\s*([1-5])?\s*четверг '," `wdd$1` "),
        новый ParsingTemplate('\s(?:в|во)?(?:\s*`b`\s*)?\s*([1-5])?\s*пятниц[у|а] '," `wde$1` "),
        новый ParsingTemplate('\s(?:в|во)?(?:\s*`b`\s*)?\s*([1-5])?\s*суббот[у|а] '," `wdf$1` "),
        новый ParsingTemplate('\s(?:в|во)?(?:\s*`b`\s*)?\s*([1-5])?\s*воскресенье '," `wdg$1` "),
        
        // Указание даты
        новый ParsingTemplate('(.*?)([0-3]?[0-9])\s+(`n[0-1]?[0-9]`)\s+(20)?(?:([2-4]?[0-9])(?:\s))?(.*)',"$1`d$2` $3 `y20$5` $6"), // месяц уже определен
        новый ParsingTemplate('(.*?)([0-3]?[0-9])\s*[\s|/|\-|\.]([0-1]?[0-9])\s*[\s|/|\-|\.]\s*(20)?(?:([2-4]?[0-9])(?:\s))?(.*)',"$1`d$2` `n$3` `y20$5` $6"), // дату пытаемся разобрать

        // Дополнительный анализ времени
        новый ParsingTemplate('(?!.*`h.*)(.*)\sв\s+([0-2]?[0-9])\s(.*)', "$1 `h$2` $3"), // если не нашли время, но есть последовательность "в 00" - считаем это часами 

        новый ParsingTemplate('`y20`', ""), // уберем разбор года, `y20` - это текущий год
        // Если были указания или смещения года - месяц года сбросить в 1
        новый ParsingTemplate('(.*)(`[\-|\+]?y\d*`)(.*)', " $1 `by` $2$3 "),
        // Но если были указания месяца - сбрасывать в начало года не нужно
        новый ParsingTemplate('(.*)(`n\d*`)(.*)`by`(.*)', " $1$2$3$4 "),
        новый ParsingTemplate('(.*)`by`(.*)(`n\d*`)(.*)', " $1$2$3$4 "),
        // Если были указания или смещения месяца - день меяца сбросить в 1
        новый ParsingTemplate('(.*)(`[\-|\+]?n\d*`)(.*)', " $1 `bn` $2$3 "),
        // Но если были указания дня - сбрасывать в начало месяца не нужно
        новый ParsingTemplate('(.*)(`d\d*`)(.*)`bn`(.*)', " $1$2$3$4 "),
        новый ParsingTemplate('(.*)`bn`(.*)(`d\d*`)(.*)', " $1$2$3$4 "),
        // уже было указано начало месяца
        новый ParsingTemplate('(.*)(`bn`)(.*)`bn`(.*)', " $1$2$3$4 "),
        // Если были указания часа - минуты сбросить в 1
        новый ParsingTemplate('(.*)(`h\d*`)(.*)', " $1 `bh` $2$3 "),
        // Но если были указания минут - сбрасывать в начало часа не нужно
        новый ParsingTemplate('(.*)(`m\d*`)(.*)`bh`(.*)', " $1$2$3$4 "),
        новый ParsingTemplate('(.*)`bh`(.*)(`m\d*`)(.*)', " $1$2$3$4 "),

        // Сохранение слова-признака в строке
        // новый ParsingTemplate('(.*)(\sвечера\s)(.*)', "`se` $1 $3"), // слово-признак сохраняется в строке в специальном формате
        // новый ParsingTemplate('(.*)(\sдня\s)(.*)', "`sd` $1 $3"), // слово-признак сохраняется в строке в специальном формате
        // новый ParsingTemplate('(.*)(\sутра\s)(.*)', "`sm` $1 $3"), // слово-признак сохраняется в строке в специальном формате
        // новый ParsingTemplate('(.*)(\sночи\s)(.*)', "`sn` $1 $3"), // слово-признак сохраняется в строке в специальном формате
        новый ParsingTemplate('(.*)(\sвечера\s|\sвечером\s)(.*)', "`se` $1 $3"), // слово-признак сохраняется в строке в специальном формате
        новый ParsingTemplate('(.*)(\sдня\s|\sднем\s|\sпополудни\s)(.*)', "`sd` $1 $3"), // слово-признак сохраняется в строке в специальном формате
        новый ParsingTemplate('(.*)(\sутра\s|\sутром\s)(.*)', "`sm` $1 $3"), // слово-признак сохраняется в строке в специальном формате
        новый ParsingTemplate('(.*)(\sночи\s|\sночью\s)(.*)', "`sn` $1 $3"), // слово-признак сохраняется в строке в специальном формате
        новый ParsingTemplate('^(?!.*(`[\-|\+]?[h|m]\d+`|`bh`|`s[m|e|n|d]`))(.*)'," $1 $2 `nt` "), // если не находим никаких признаков времени - ставим специальное время
        новый ParsingTemplate('^(?!.*(`[\-|\+]?[y|n|d|w]\d+`|`wd[a-g]`|`b[y|n|w|d]`))(.*)'," $1 $2 `nd` "), // если не находим никаких признаков даты - ставим специальную дату
        //  Общие замены в конце
        новый ParsingTemplate('\sчерез\s', " "), // если в конце осталось слово через - уберем
        новый ParsingTemplate('\s\s', " "),      // уберем лишние пробелы
        новый ParsingTemplate('\s\s', " ")      // уберем лишние пробелы, вызываем второй раз, поскольку используем простой поиск и 3 пробела превращаются в 2
    ]
    
;

@ВПроекте
метод all_values(): Массив<ParsingTemplate> 
    пер ret = preprocess_values()
   
    ret.ДобавитьВсе(string_representations_values())
    
    ret.ДобавитьВсе(postprocess_values())
    
    возврат ret
;

@ВПроекте
перечисление DateTimeSubst
    y, // год
    n, // месяц
    d, // день
    h, // час
    m, // минута
    w, // неделя

    wda, // день недели
    wdb,
    wdc,
    wdd,
    wde,
    wdf,
    wdg,

    sm, // утро
    sd, // день
    se, // вечер
    sn, // ночь

    nt, // не указано никакое время, ставим спец.время
    nd, // не указана никакая дата

    by, // признак начала периода
    bn,
    bw,
    bd,
    bh,

    // добавки к частям даты/времени, с плюсом или минусом
    y_a,
    n_a,
    d_a,
    h_a,
    m_a,
    w_a
;

перечисление HourAdd12 
    No,
    Yes,
    Check
;

структура Fields3
    знч F1: Число
    знч F2: Число
    знч F3: Число
;

@ВПроекте
структура DateTimeParts 
    пер data: Соответствие<DateTimeSubst, Число>
    пер client_date_time: DateTime
    пер client_offset: Число

    @ВПроекте
    статический метод from(source: Строка, dt: DateTime, offset: Число): DateTimeParts
        пер data = {
            DateTimeSubst.y: get_num(source, [ParsingTemplate.from( '.*`y(\d+)`.*', " $1 " )]), 
            DateTimeSubst.n: get_num(source, [ParsingTemplate.from( '.*`n(\d+)`.*', " $1 ") ]), 
            DateTimeSubst.d: get_num(source, [ParsingTemplate.from( '.*`d(\d+)`.*', " $1 ") ]),
            DateTimeSubst.h:get_num(source, [ParsingTemplate.from( '.*`h(\d+)`.*', " $1 ")  ]), 
            DateTimeSubst.m:get_num(source, [ParsingTemplate.from( '.*`m(\d+)`.*', " $1 ")  ]), 
            DateTimeSubst.w:get_num(source, [ParsingTemplate.from( '.*`w(\d+)`.*', " $1 ")  ]), 
            DateTimeSubst.wda:get_num(source, [ParsingTemplate.from( '.*`wda(\d+)`.*', " $1 ") ,ParsingTemplate.from( '.*`wda`.*', " 1 ")  ]), 
            DateTimeSubst.wdb:get_num(source, [ParsingTemplate.from( '.*`wdb(\d+)`.*', " $1 ") ,ParsingTemplate.from( '.*`wdb`.*', " 1 ")  ]), 
            DateTimeSubst.wdc:get_num(source, [ParsingTemplate.from( '.*`wdc(\d+)`.*', " $1 ") ,ParsingTemplate.from( '.*`wdc`.*', " 1 ")  ]), 
            DateTimeSubst.wdd:get_num(source, [ParsingTemplate.from( '.*`wdd(\d+)`.*', " $1 ") ,ParsingTemplate.from( '.*`wdd`.*', " 1 ")  ]), 
            DateTimeSubst.wde:get_num(source, [ParsingTemplate.from( '.*`wde(\d+)`.*', " $1 ") ,ParsingTemplate.from( '.*`wde`.*', " 1 ")  ]), 
            DateTimeSubst.wdf:get_num(source, [ParsingTemplate.from( '.*`wdf(\d+)`.*', " $1 ") ,ParsingTemplate.from( '.*`wdf`.*', " 1 ")  ]), 
            DateTimeSubst.wdg:get_num(source, [ParsingTemplate.from( '.*`wdg(\d+)`.*', " $1 ") ,ParsingTemplate.from( '.*`wdg`.*', " 1 ")  ]), 
            DateTimeSubst.sm:get_num(source,  [ ParsingTemplate.from( '.*`sm`.*', " 1 ")  ]), 
            DateTimeSubst.sd:get_num(source,  [ ParsingTemplate.from( '.*`sd`.*', " 1 ")  ]), 
            DateTimeSubst.se:get_num(source,  [ ParsingTemplate.from( '.*`se`.*', " 1 ")  ]), 
            DateTimeSubst.sn:get_num(source,  [ ParsingTemplate.from( '.*`sn`.*', " 1 ")  ]), 
            DateTimeSubst.nt:get_num(source,  [ ParsingTemplate.from( '.*`nt`.*', " 1 ")  ]), 
            DateTimeSubst.nd:get_num(source,  [ ParsingTemplate.from( '.*`nd`.*', " 1 ")  ]), 
            DateTimeSubst.by:get_num(source,  [ ParsingTemplate.from( '.*`by`.*', " 1 ")  ]), 
            DateTimeSubst.bn:get_num(source,  [ ParsingTemplate.from( '.*`bn`.*', " 1 ")  ]), 
            DateTimeSubst.bw:get_num(source,  [ ParsingTemplate.from( '.*`bw`.*', " 1 ")  ]), 
            DateTimeSubst.bd:get_num(source,  [ ParsingTemplate.from( '.*`bd`.*', " 1 ")  ]), 
            DateTimeSubst.bh:get_num(source,  [ ParsingTemplate.from( '.*`bh`.*', " 1 ")  ]), 
            DateTimeSubst.y_a:get_num(source, [ ParsingTemplate.from( '.*`(\-|\+)y(\d+)`.*', " $1$2 ")  ]), 
            DateTimeSubst.n_a:get_num(source, [ ParsingTemplate.from( '.*`(\-|\+)n(\d+)`.*', " $1$2 ")  ]), 
            DateTimeSubst.d_a:get_num(source, [ ParsingTemplate.from( '.*`(\-|\+)d(\d+)`.*', " $1$2 ")  ]), 
            DateTimeSubst.h_a:get_num(source, [ ParsingTemplate.from( '.*`(\-|\+)h(\d+)`.*', " $1$2 ")  ]), 
            DateTimeSubst.m_a:get_num(source, [ ParsingTemplate.from( '.*`(\-|\+)m(\d+)`.*', " $1$2 ")  ]), 
            DateTimeSubst.w_a:get_num(source, [ ParsingTemplate.from( '.*`(\-|\+)w(\d+)`.*', " $1$2 ")  ]) 
        }
        
        возврат новый DateTimeParts(
            data,
            dt,
            offset
        )
    ;

    //значение по умолчанию
    статический метод get_missing_value(): Число 
        возврат -100000
    ;

    // проверка значения по умолчанию
    статический метод is_missing(vl: Число): Булево 
        возврат (vl == get_missing_value())
    ;

    // Разбирает текстовые значения, пришедшие в строке и описанные в массиве
    статический метод get_num(source: String, pa: Массив<ParsingTemplate>): Число 
        для p из pa
            попытка
                знч СтрНом = p.parse(source).Сократить()
                если не СтрНом.Пусто()
                    знч Ном = новый Число( СтрНом )
                    возврат Ном
                ;
            поймать Искл: ИсключениеНедопустимыйФормат
            ;
        ;    
        возврат get_missing_value()
    ;

    // Получает значения из хэш таблицы
    метод get_val(dts: DateTimeSubst) : Число 
        пер vl = data.Получить(dts)
        возврат vl
    ;

    // Рассчитывает время с учетом специальных значений
    метод get_special_hm() : Fields3 

        if не is_missing(get_val(DateTimeSubst.sm)) 
            возврат новый Fields3(10, 0, 0)
        else if не is_missing(get_val(DateTimeSubst.sd)) 
            возврат новый Fields3(13, 0, 0)
        else if не is_missing(get_val(DateTimeSubst.se)) 
            возврат новый Fields3(20, 0, 0)
        else if не is_missing(get_val(DateTimeSubst.sn)) 
            возврат новый Fields3(12, 0, 12)
        else if не is_missing(get_val(DateTimeSubst.nt)) 
            возврат новый Fields3(10, 0, 0) // если не указано - ставим утро, возможно лучше такую ситуацию
                    // обрабатывать в самом конце
        else 
            возврат новый Fields3(get_missing_value(), get_missing_value(), 0)
        ;
    ;


    // добавляет к часам 12
    метод get_hour_add(h: Число, sm: Булево, sd: Булево, se: Булево, sn: Булево, bd: Булево) : HourAdd12 
        if h > 12 
           возврат HourAdd12.No
        else 
            // утро - ничего добавлять не надо
            // день - 1-6 - прибавляем
            if sd и h>=1 и h<=6 
                возврат HourAdd12.Yes
            
            // вечер - 4-12 - прибавляем
            else if se и h>=4 и h<=12 
                возврат HourAdd12.Yes
            
            // ночь - 10-12 - прибавляем
            else if sn и h>=10 и h<=12 
                возврат HourAdd12.Yes
            
            // никаких признаков нет - 1-6 - прибавляем
            else if не sm и не sd и не se и не sn 
                if h>=1 и h<=5 
                    // это точно день
                    возврат HourAdd12.Yes
                else if bd 
                    // Переходим на след.день
                    возврат HourAdd12.No
                else 
                    // а вот тут надо проверить
                    возврат HourAdd12.Check 
                ;
            else 
                возврат HourAdd12.No
            ;
        ;
       
    ;


    // Получает начало недели
    метод get_begin_of_week(dt: DateTime) : DateTime 
        
        знч День = 1д
        знч delta = dt.ДеньНедели().Индекс
        if delta == 0 
            возврат dt
        else 
            возврат dt - День*delta
        ;
    ;

    // Получает день недели.
    метод get_day_of_week(dt: DateTime, other: ДеньНедели) : DateTime 
        
        знч День = 1д

        знч delta_curr = dt.ДеньНедели().Индекс
        знч delta_other = other.Индекс
        знч delta = delta_other - delta_curr

        if delta == 0 
            возврат dt
        else 
            возврат dt + День*delta
        ;
    ;

    // Анализирует день недели и возвращает новую дату
    метод analyse_day_of_week(dt: DateTime, bn: Булево) : DateTime 
        знч День = 1д
        
        знч l_arr = [
            DateTimeSubst.wda, 
            DateTimeSubst.wdb, 
            DateTimeSubst.wdc, 
            DateTimeSubst.wdd, 
            DateTimeSubst.wde, 
            DateTimeSubst.wdf, 
            DateTimeSubst.wdg
        ]
        
        знч d_arr = [
            ДеньНедели.Понедельник,
            ДеньНедели.Вторник,
            ДеньНедели.Среда,
            ДеньНедели.Четверг,
            ДеньНедели.Пятница,
            ДеньНедели.Суббота,
            ДеньНедели.Воскресенье
        ]

        пер нед: Число? = Неопределено 
        пер дн: ДеньНедели? = Неопределено 
        
        для Индекс = 0 по l_arr.Граница() 
            пер r = l_arr.Получить(Индекс)        
            знч vl = get_val(r) 
            if не is_missing(vl) 
                // нашелся день недели в строке
                нед = vl
                дн = d_arr.Получить(Индекс)
                прервать
            ;
        ;

        if нед == Неопределено
            return dt
        ;

        пер dtnew = get_day_of_week(dt, дн)
        if dtnew <= dt 
            // если дата меньше или равна текущей - добавляет неделю
            нед += 1
        ;
        
        пер dtnew2: ДатаВремя
        
        пока Истина 
            dtnew2 = dtnew + День * (7 * (нед - 1))
                
            if не bn 
                прервать
            else 
                if dt.Месяц == dtnew2.Месяц 
                    прервать
                ;
            
                нед -= 1
            
                if нед < 1 
                    прервать
                ;
            ;
        ;

        возврат dtnew2
        
    ;
    

    // Сравнивает с переданной датой и сдвигает, если возможно
    метод compare_with_client_date(dt: DateTime, haddenum: HourAdd12) : DateTime 
        знч Ч12 = 12ч
        знч День = 1д
        
        if dt < client_date_time
            и haddenum == HourAdd12.Check
            и dt+Ч12 > client_date_time
        
            return dt+Ч12
        ;
        
        if dt < client_date_time 
            пер vl = get_val(DateTimeSubst.d)
            
            if is_missing(vl) 
                // попробуем добавить день
                знч dtnew = dt+День

                if dtnew >= client_date_time 
                    return dtnew
                ;
            ;

            vl = get_val(DateTimeSubst.n)
            if is_missing(vl) 
                // попробуем добавить месяц
                знч dtnew = dt.ДобавитьМесяцы(1)

                if dtnew >= client_date_time 
                    return dtnew
                ;
            ;

            vl = get_val(DateTimeSubst.y)
            if is_missing(vl) 
                // попробуем добавить год
                знч гг = dt.Год
                знч dtnew = dt.СГодом(гг + 1)

                if dtnew >= client_date_time 
                    return dtnew
                ;
            ;

            возврат dt
        else 
            возврат dt
        ;
    ;

    // Разбирает подготовленную хэш таблицу
    // - сразу вычисляется год, как указанный, так и с учетом добавок
    // - определяются начала периодов, зависящие друг от друга
    // - находится месяц и день с учетом начал периодов.
    // - создается дата без времени
    // - добавляется месяц и день с учетом добавок
    // - вычисляется день недели
    @ВПроекте
    метод parse_data() : DateTime? 
        if не is_missing(get_val(DateTimeSubst.nd))
            и не is_missing(get_val(DateTimeSubst.nt))
        
            // если нет указаний ни на дату, ни на время - возвращаемся
            return Неопределено
        ;

        пер y = get_val(DateTimeSubst.y)
        знч y_spec = y != get_missing_value() // пришел конкретный год
        
        if не y_spec 
            // не было года - выберем из текущей даты
            y = client_date_time.Год
        ;
        
        // Год изменим сразу здесь
        знч y_a = get_val(DateTimeSubst.y_a)
        if y_a != get_missing_value() 
            y += y_a
        ;

        // начала периодов, кажый следующий период зависит от предыдущего
        знч by = get_val(DateTimeSubst.by) == 1
        знч bn = by или get_val(DateTimeSubst.bn) == 1
        знч bd = bn или get_val(DateTimeSubst.bd) == 1
        знч bh = bd или get_val(DateTimeSubst.bh) == 1
        знч bw = get_val(DateTimeSubst.bw) == 1 // начало недели от других не зависит

        пер n = get_val(DateTimeSubst.n)
        знч n_spec = n != get_missing_value() // пришел конкретный месяц
        if не n_spec 
            // не было месяца - выберем из текущей даты
            if by 
                n = 1
            else 
                n = client_date_time.Месяц
            ;
        ;

        пер d = get_val(DateTimeSubst.d)
        знч d_spec = d != get_missing_value() // пришел конкретный день
        if не d_spec 
            if bn 
                d = 1 //Начало месяца
            else 
                d = client_date_time.День
            ;
        ;

        // сначала дата без времени
        пер ret = новый ДатаВремя(y,n,d)

        знч n_a = get_val(DateTimeSubst.n_a)
        if n_a != get_missing_value() 
            if n_a > 0 
                ret = ret.ДобавитьМесяцы(n_a)
            else 
                ret = ret.ДобавитьМесяцы(n_a)
            ;
        ;

        знч w_a = get_val(DateTimeSubst.w_a)
        if w_a != get_missing_value() 
            if w_a > 0 
                ret = ret.ДобавитьДни(7 * w_a)
            else 
                ret = ret.ДобавитьДни(7 * w_a)
            ;
        ;

        //Начало недели
        if bw 
            ret = get_begin_of_week(ret)
        ;

        знч d_a = get_val(DateTimeSubst.d_a)
        if d_a != get_missing_value() 
            if d_a > 0 
                ret = ret.ДобавитьДни(d_a)
            else 
                ret = ret.ДобавитьДни(d_a)
            ;
        ;

        // Дни недели
        ret = analyse_day_of_week(ret, bn)

        // Время
        пер h = get_val(DateTimeSubst.h)
        знч h_spec = h != get_missing_value() // пришел конкретный час
        пер m = get_val(DateTimeSubst.m)
        знч m_spec = m != get_missing_value() // пришла конкретная минута
        пер hadd: Число = 0 // добавка к часам 12 в зависимости от времени дня
        пер haddenum = HourAdd12.No // добавка к часам (перечисление) в зависимости от времени дня

        if не h_spec и не m_spec 
            знч spec = get_special_hm()
            h = spec.F1 
            m = spec.F2 
            hadd = spec.F3
        else if h_spec и h <= 12 
            // Проверим, что время указано относительно
            знч sm = get_val(DateTimeSubst.sm) == 1
            знч se = get_val(DateTimeSubst.se) == 1
            знч sd = get_val(DateTimeSubst.sd) == 1
            знч sn = get_val(DateTimeSubst.sn) == 1

            haddenum = get_hour_add(h, sm, sd, se, sn, bd)
            if haddenum == HourAdd12.Yes 
                hadd = 12
            ;
        ;

        if is_missing(h) 
            //Начало дня
            if bd 
                h = 0
                m = 0
            else 
                h = client_date_time.Час 
            ;
        ;

        if m == get_missing_value() 
            //Начало часа
            if bd или bh 
                m = 0
            else 
                m = client_date_time.Минута
            ;
        ;

        ret = новый ДатаВремя(ret.Дата, новый Время(h,m,0))

        знч h_a = get_val(DateTimeSubst.h_a)
        if h_a != get_missing_value() 
            hadd += h_a // в hadd  соберем все добавления часов
        ;

        if hadd != 0 
            ret = ret.ДобавитьЧасы(hadd)
        ;

        знч m_a = get_val(DateTimeSubst.m_a)
        if m_a != get_missing_value() 
            ret = ret.ДобавитьМинуты(m_a)
        ;

        // Должны сравнить с переданной датой и сдвинуть на опр.значения
        ret = compare_with_client_date(ret, haddenum)

        возврат ret
    ;
;

метод assert_eq(Стр1: Строка, Стр2: Строка, КонтекстПроверки: Строка = "")
    Общие.ПроверитьРавно(Стр1, Стр2, КонтекстПроверки)
;    
метод assert_eq(Стр1: ДатаВремя, Стр2: ДатаВремя, КонтекстПроверки: Строка = "")
    Общие.ПроверитьРавно(Стр1, Стр2, КонтекстПроверки)
;    

@ВПроекте
метод test_act(
         vals: Массив<ParsingTemplate>,
         source: Строка,
         dest_str: Строка,
         dest_dts: Строка,
         client_dt: Строка
     ) 
    знч t = Разобрать(vals,source)
    if dest_str != "" 
        assert_eq(t, dest_str, source)
    ;
    if dest_dts != "" 
        знч dest_dt = новый ДатаВремя(dest_dts)
        знч client_dt2 = новый ДатаВремя(client_dt)
        //знч client_dt3 = привести к часовому поясу
        знч d = DateTimeParts.from(t, client_dt2, 0)
        знч pd = d.parse_data()
        assert_eq(pd, dest_dt,source)
    ;
;

