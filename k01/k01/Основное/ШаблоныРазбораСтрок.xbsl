конст РАЗДЕЛИТЕЛЬ_ДЛЯ_РАЗБОРА_СТРОК = "#&#"


@ВПроекте
структура ШаблонРазбора
    обз пер РегВыражение: Строка
    обз пер Заменитель: Строка
    пер Комментарий: Строка
        
    @ВПроекте
    статический метод Из(РегВыражение:Строка): ШаблонРазбора
        возврат новый  ШаблонРазбора(РегВыражение,"")
    ;
    
    @ВПроекте
    статический метод Из(РегВыражение:Строка, Заменитель:Строка): ШаблонРазбора
        возврат новый  ШаблонРазбора(РегВыражение,Заменитель)
    ;
		
	метод Разобрать(Источник: Строка): Строка
        знч Результат = Источник.Заменить(новый Образец("%РегВыражение(?im)"), Заменитель) 
        возврат Результат
	;


    метод Разделить(Источник: Строка): РазделеннаяСтрока
        пер РазобрСтрока:Строка
        если Заменитель.Пусто() 
            РазобрСтрока = ШаблонРазбора.Из(РегВыражение,"$1%{РАЗДЕЛИТЕЛЬ_ДЛЯ_РАЗБОРА_СТРОК}$2").Разобрать(Источник) 
        иначе    
            РазобрСтрока = этот.Разобрать(Источник) 
        ;
        пер Рез = РазобрСтрока.Разделить(РАЗДЕЛИТЕЛЬ_ДЛЯ_РАЗБОРА_СТРОК)          
        если Рез.Размер() == 1
            возврат новый РазделеннаяСтрока(Источник,"") 
        иначе 
            возврат новый РазделеннаяСтрока(Рез[0],Рез[1])
        ;        
	;

	метод РазделитьУпрощенноНа2Группы(Источник: Строка): РазделеннаяСтрока
        
        знч ОбразецДляПоискаСочетаний = новый Образец("%РегВыражение(?im)")
        знч РезультатПоиска = ОбразецДляПоискаСочетаний.НайтиСовпадения(Источник)
        если РезультатПоиска.Пусто() 
            возврат новый РазделеннаяСтрока(Источник,"") 
        иначе 
            знч ПервыйРезультат = РезультатПоиска[0]
            возврат новый РазделеннаяСтрока(ПервыйРезультат.Группа(1),ПервыйРезультат.Группа(2))
        ;        
	;
;

@ВПроекте
структура РазделеннаяСтрока
    обз пер Начало: Строка
    обз пер Конец: Строка
;


@ВПроекте
метод РазобратьМассив(МассивШаблонов: Массив<ШаблонРазбора>, Источник: Строка): Строка
    для Элемент из МассивШаблонов    
        Источник = Элемент.Разобрать(Источник)    
    ;
    возврат Источник 
;        

@ВПроекте
метод РазделитьМассив(МассивШаблонов: Массив<ШаблонРазбора>, Источник: Строка): РазделеннаяСтрока
    пер Результат = новый РазделеннаяСтрока(Источник,"")
    для Элемент из МассивШаблонов    
        знч Разд:РазделеннаяСтрока = Элемент.Разделить(Источник)    
        если не Разд.Конец.Пусто() 
            Результат = Разд
            прервать
        ;    
    ;
    возврат Результат
;        


@ВПроекте
метод ПолучитьШаблоныВыделенияСтрокиСДатой():Массив<ШаблонРазбора>
    // считаем, что дата время указана в конце сообщения в форме !когда! в !какое время! или !через! !дней, часов или минут!

    пер МассивШаблонов: Массив<ШаблонРазбора> = новый Массив<ШаблонРазбора>()
    МассивШаблонов.Добавить(ШаблонРазбора.Из("(.*)( дата .*)"))
    МассивШаблонов.Добавить(ШаблонРазбора.Из("(.*?)( через .*)"))
    МассивШаблонов.Добавить(ШаблонРазбора.Из("(.*)((в|на) следующ.*)"))
    МассивШаблонов.Добавить(ШаблонРазбора.Из("(.*)((сегодня|завтра|послезавтра).*)"))
    возврат МассивШаблонов
;


@ВПроекте
метод ПолучитьШаблоныПредварительнойОбработки():Массив<ШаблонРазбора>
    пер МассивШаблонов: Массив<ШаблонРазбора> = новый Массив<ШаблонРазбора>()
    МассивШаблонов.Добавить(ШаблонРазбора.Из(" утром"," в 10:00"))
    МассивШаблонов.Добавить(ШаблонРазбора.Из(" днем"," в 13:00"))
    МассивШаблонов.Добавить(ШаблонРазбора.Из(" вечером"," в 22:00"))

    МассивШаблонов.Добавить(ШаблонРазбора.Из(" в час дня"," в 13:00"))
    МассивШаблонов.Добавить(ШаблонРазбора.Из(" в час ночи"," в 1:00"))

    //
    // МассивШаблонов.Добавить(ШаблонРазбора.Из(" в (\d?) час?"," в %1:00"))
    
    // без четверти, в четверть, в половине первого, полпервого, без пятнадцати, пятнадцать минут первого
    
	МассивШаблонов.Добавить(ШаблонРазбора.Из("после завтра", "послезавтра")) // на случай ошибки
	
    МассивШаблонов.Добавить(ШаблонРазбора.Из("ближайший", "следующий")) // синонимы
    МассивШаблонов.Добавить(ШаблонРазбора.Из("ближайшую", "следующую")) // синонимы
    МассивШаблонов.Добавить(ШаблонРазбора.Из("ближайшее", "следующее")) // синонимы
    
	МассивШаблонов.Добавить(ШаблонРазбора.Из("в понедельник","в следующий понедельник"))
	МассивШаблонов.Добавить(ШаблонРазбора.Из("во вторник","в следующий вторник"))
	МассивШаблонов.Добавить(ШаблонРазбора.Из("в среду","в следующую среду"))
	МассивШаблонов.Добавить(ШаблонРазбора.Из("в четверг","в следующий четверг"))
	МассивШаблонов.Добавить(ШаблонРазбора.Из("в пятницу","в следующую пятницу"))
	МассивШаблонов.Добавить(ШаблонРазбора.Из("в субботу","в следующую субботу"))
	МассивШаблонов.Добавить(ШаблонРазбора.Из("в воскресенье","в следующее воскресенье"))
    
    возврат МассивШаблонов
;


@Локально
метод СтроковыеПредставленияЧисел(): Соответствие<Строка, Число>
    знч СтроковыеПредставленияПолейТек = новый Соответствие<Строка, Число>()
    СтроковыеПредставленияПолейТек.Вставить("ноль", 0)
    СтроковыеПредставленияПолейТек.Вставить("нуль", 0)
    СтроковыеПредставленияПолейТек.Вставить("один", 1)
    СтроковыеПредставленияПолейТек.Вставить("одна", 1)
    СтроковыеПредставленияПолейТек.Вставить("два", 2)
    СтроковыеПредставленияПолейТек.Вставить("две", 2)
    СтроковыеПредставленияПолейТек.Вставить("три", 3)
    СтроковыеПредставленияПолейТек.Вставить("четыре", 4)
    СтроковыеПредставленияПолейТек.Вставить("пять", 5)
    СтроковыеПредставленияПолейТек.Вставить("шесть", 6)
    СтроковыеПредставленияПолейТек.Вставить("семь", 7)
    СтроковыеПредставленияПолейТек.Вставить("восемь", 8)
    СтроковыеПредставленияПолейТек.Вставить("девять", 9)
    СтроковыеПредставленияПолейТек.Вставить("десять", 10)
    СтроковыеПредставленияПолейТек.Вставить("одиннадцать", 11)
    СтроковыеПредставленияПолейТек.Вставить("двенадцать", 12)
    СтроковыеПредставленияПолейТек.Вставить("тринадцать", 13)
    СтроковыеПредставленияПолейТек.Вставить("четырнадцать", 14)
    СтроковыеПредставленияПолейТек.Вставить("пятнадцать", 15)
    СтроковыеПредставленияПолейТек.Вставить("шестнадцать", 16)
    СтроковыеПредставленияПолейТек.Вставить("семнадцать", 17)
    СтроковыеПредставленияПолейТек.Вставить("восемнадцать", 18)
    СтроковыеПредставленияПолейТек.Вставить("девятнадцать", 19)
    СтроковыеПредставленияПолейТек.Вставить("двадцать", 20)
    СтроковыеПредставленияПолейТек.Вставить("тридцать", 30)
    СтроковыеПредставленияПолейТек.Вставить("сорок", 40)
    СтроковыеПредставленияПолейТек.Вставить("пятьдесят", 50)
    СтроковыеПредставленияПолейТек.Вставить("шестьдесят", 60)
    возврат СтроковыеПредставленияПолейТек
;


@ВПроекте
метод ПолучитьШаблоныСтроковыхПредставленийЧисел(): Массив<ШаблонРазбора>
    пер МассивШаблонов: Массив<ШаблонРазбора> = новый Массив<ШаблонРазбора>()
    знч СтроковыеПредставленияЧисел = СтроковыеПредставленияЧисел()
    для Эл из СтроковыеПредставленияЧисел
        МассивШаблонов.Добавить(ШаблонРазбора.Из("(?:[^\\w]|\\s|^)(%{Эл.Ключ})(?:[^\\w]|\\s|$)", " ${Эл.Значение|02} "))
    ;

    возврат МассивШаблонов
;