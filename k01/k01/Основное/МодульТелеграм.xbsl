// модуль серверный

конст URL_TELEGRAM = "https://api.telegram.org"


@ВПроекте
метод ПолучитьТокен(): Строка
    исп Результат = Запрос{
        ВЫБРАТЬ
            Токен КАК Токен
        ИЗ
            СправочникНастройки
        ГДЕ
            Код == 1
    }.Выполнить()

    знч Токен = Результат.ПервыйИлиУмолчание().Токен

    Результат.Закрыть()

    возврат Токен
;


@ВПроекте
метод ПолучитьКлючАвторизации(): Строка
    исп Результат = Запрос{
        ВЫБРАТЬ
            КлючАвторизацииСбер
        ИЗ
            СправочникНастройки
        ГДЕ
            Код == 1
    }.Выполнить()

    знч Рез = Результат.ПервыйИлиУмолчание().КлючАвторизацииСбер

    Результат.Закрыть()

    возврат Рез
;


@ВПроекте
метод ПолучитьПутьWebhook(): Строка
    исп Результат = Запрос{
        ВЫБРАТЬ
            АдресПриложения,
            SpecialString
        ИЗ
            СправочникНастройки
        ГДЕ
            Код == 1
    }.Выполнить()

    знч Рез = Результат.ПервыйИлиУмолчание()

    Результат.Закрыть()

    возврат "%{Рез.АдресПриложения}/api/k/bot/%{Рез.SpecialString}/"
;


@ВПроекте
метод ПолучитьАдресПриложения(): Строка
    исп Результат = Запрос{
        ВЫБРАТЬ
            АдресПриложения
        ИЗ
            СправочникНастройки
        ГДЕ
            Код == 1
    }.Выполнить()

    знч Рез = Результат.ПервыйИлиУмолчание()

    Результат.Закрыть()

    возврат "%{Рез.АдресПриложения}"
;


@ВПроекте
метод ПолучитьSpecialString(): Строка
    // Дополнительная проверка, в пути сервиса должна быть эта строка

    исп Результат = Запрос{
        ВЫБРАТЬ
            SpecialString
        ИЗ
            СправочникНастройки
        ГДЕ
            Код == 1
    }.Выполнить()

    знч Рез = Результат.ПервыйИлиУмолчание().SpecialString

    Результат.Закрыть()

    возврат Рез
;


@ВПроекте
метод УстановитьWebhook(): Строка
    пер Токен = ПолучитьТокен()
    //Токен = Токен.Заменить(":","%3A")

    знч Webhook = ПолучитьПутьWebhook()

    знч URL = "%{URL_TELEGRAM}/bot%Токен/setWebHook"

    пер Запрос = КлиентHttp.ЗапросGet(URL)
        .ДобавитьПараметрЗапроса("url", Webhook)

    //     Запрос.ДобавитьЗаголовок("Accept-Encoding", "gzip")
    //     Запрос.ДобавитьЗаголовок("Accept", "*/*")
    //     Запрос.ДобавитьЗаголовок("Connection", "keep-alive")
    //     Запрос.ДобавитьЗаголовок("Accept-Charset", "utf-8")

    знч Ответ = Запрос.Выполнить()
    возврат Ответ.Тело.ПрочитатьКакСтроку()
;


@ВПроекте
метод УдалитьWebhook(): Строка
    знч Токен = ПолучитьТокен()

    знч URL = "%{URL_TELEGRAM}/bot%Токен/deleteWebHook"

    пер Запрос = КлиентHttp.ЗапросGet(URL)

    //     Запрос.ДобавитьЗаголовок("Accept-Encoding", "gzip")
    //     Запрос.ДобавитьЗаголовок("Accept", "*/*")
    //     Запрос.ДобавитьЗаголовок("Connection", "keep-alive")
    //     Запрос.ДобавитьЗаголовок("Accept-Charset", "utf-8")

    знч Ответ = Запрос.Выполнить()
    возврат Ответ.Тело.ПрочитатьКакСтроку()
;


/*
 * @Локально
 * структура КомандаБота
 *     пер command: Строка
 *     пер description: Строка?
 * ;
 */
@ВПроекте
метод УстановитьКомандыБота(): Строка
    пер Токен = ПолучитьТокен()

    знч URL = "%{URL_TELEGRAM}/bot%Токен/setMyCommands"

    знч БазовыеКоманды = [{
        "command": "start",
        "description": "Инициализация бота"
    },{
        "command": "help",
        "description": "Помощь"
    } 
    ,{
        "command": "open",
        "description": "Открыть ссылку на приложение"
    }    
    ,{
        "command": "list",
        "description": "Показать не более 9 ближайших оставшихся напоминаний"
    }
    ]

    знч Запрос = КлиентHttp.ЗапросGet(URL)
        .ДобавитьПараметрЗапроса("commands", СериализацияJson.ЗаписатьОбъект(БазовыеКоманды))

    исп Ответ = Запрос.Выполнить()
    возврат Ответ.Тело.ПрочитатьКакСтроку()
;


@ВПроекте
метод УдалитьКомандыБота(): Строка
    знч Токен = ПолучитьТокен()

    знч URL = "%{URL_TELEGRAM}/bot%Токен/deleteMyCommands"

    знч Запрос = КлиентHttp.ЗапросGet(URL)

    исп Ответ = Запрос.Выполнить()
    возврат Ответ.Тело.ПрочитатьКакСтроку()
;



/*
 * @ВПроекте
 * метод ОтправитьСообщениеHelp(IDЧата: Число): Строка
 *     возврат ОтправитьТекстовоеСообщение(IDЧата, ТекстПомощи, ВидыКлавиатуры.НеПоказывать)
 * ;
 */
/* @ВПроекте
метод ОтправитьТекстовоеСообщение(IDЧата: Число, Текст: Строка): Строка
    возврат ОтправитьТекстовоеСообщение(IDЧата, Текст, "")
;
 */

@ВПроекте
метод ОтправитьТекстовоеСообщение(IDЧата: Число, Текст: Строка , ТекстВстроеннойКлавиатуры: Строка = ""): Строка
    знч Токен = ПолучитьТокен()

    знч URL = "%{URL_TELEGRAM}/bot%Токен/sendMessage"

    пер Запрос = КлиентHttp.ЗапросGet(URL)
        .ДобавитьПараметрЗапроса("chat_id", IDЧата.ВСтроку())
        .ДобавитьПараметрЗапроса("parse_mode", "Markdown")
        .ДобавитьПараметрЗапроса("text", Текст)
    
    если не ТекстВстроеннойКлавиатуры.Пусто() 
        Запрос.ДобавитьПараметрЗапроса("reply_markup",ТекстВстроеннойКлавиатуры)
    ;

    Запрос.ДобавитьЗаголовок("Accept-Encoding", "gzip")
    Запрос.ДобавитьЗаголовок("Accept", "*/*")
    Запрос.ДобавитьЗаголовок("Connection", "keep-alive")
    Запрос.ДобавитьЗаголовок("Accept-Charset", "utf-8")

    пер Ответ = Запрос.Выполнить()

    возврат Ответ.Тело.ПрочитатьКакСтроку()
;


@ВПроекте
метод ЭтоКомандаБота(ИмяКоманды: Строка): Булево
    возврат ИмяКоманды.НачинаетсяС("/")
;

@Локально
конст ТекстПомощи =
    "Привет! Это бот для разбора даты и времени в текстовых напоминаниях. Вот список доступных команд:\n/start - инициализация\n/help - показать справку\n/open - открыть ссылку на приложение\n/list - показать не более 9 ближайших оставшихся напоминаний"


@Локально
метод ПолучитьТекстОткрытиеСсылки(): Строка

    возврат "[Открыть ссылку на приложение](%{ПолучитьАдресПриложения()})"

;

// @ВПроекте
// метод ПолучитьТекстОтменаНапоминания(Код: Строка): Строка

// //    возврат "[Отменить](%{ПолучитьПутьWebhook()}esc=%Код)"
//     возврат "[Отменить](/esc%Код)"

// ;


@ВПроекте
метод ОбработатьКомандуБота(ИдЧата: Число, ИмяКоманды: Строка): Строка
    если ИмяКоманды.НачинаетсяС("/start") or ИмяКоманды.НачинаетсяС("/help")
        МодульТелеграм.ОтправитьТекстовоеСообщение(ИдЧата,ТекстПомощи)
    ;
    если ИмяКоманды.НачинаетсяС("/open") 
        МодульТелеграм.ОтправитьТекстовоеСообщение(ИдЧата,ПолучитьТекстОткрытиеСсылки())
    ;
    если ИмяКоманды.НачинаетсяС("/list") 
        пер Текст = "Показан список ближайших напоминаний"
        пер ТекстКлавиатуры = ""
        знч Данные = СправочникНапоминаний.ПолучитьСписокНапоминаний(ИдЧата)
        если Данные.Размер() == 0 
            Текст = "Не найдено напоминаний"    
        иначе 
            если Данные.Размер() > 9 
                Текст = "%Текст (только 9 записей)"
                Данные.Удалить(Данные.Последний())
           ;     
           ТекстКлавиатуры = ПолучитьКлавиатуруСписокНапоминаний(Данные)
        ;
        МодульТелеграм.ОтправитьТекстовоеСообщение(ИдЧата,Текст,ТекстКлавиатуры)
    ;
    возврат ""
;


@ВПроекте
метод ЭтоКомандаСПодтверждением(ИмяКоманды: Строка): Булево
    возврат ЭтоКомандаОтмены(ИмяКоманды) или ЭтоКомандаПродления(ИмяКоманды)
;

@ВПроекте
метод ОтправитьПодтверждениеНажатияКнопки(CallbackQueryId: Строка, ИмяКоманды: Строка, Текст = ""): Строка
    знч Токен = ПолучитьТокен()

    знч URL = "%{URL_TELEGRAM}/bot%Токен/answerCallbackQuery"

    пер Запрос = КлиентHttp.ЗапросGet(URL)
        .ДобавитьПараметрЗапроса("callback_query_id", CallbackQueryId.ВСтроку())

    если не Текст.Пусто()
        Запрос.ДобавитьПараметрЗапроса("text", Текст)
    ;

    Запрос.ДобавитьЗаголовок("Accept-Encoding", "gzip")
    Запрос.ДобавитьЗаголовок("Accept", "*/*")
    Запрос.ДобавитьЗаголовок("Connection", "keep-alive")
    Запрос.ДобавитьЗаголовок("Accept-Charset", "utf-8")

    пер Ответ = Запрос.Выполнить()

    возврат Ответ.Тело.ПрочитатьКакСтроку()
;


@ВПроекте
метод ОбработатьКомандуОтмены(ИмяКоманды: Строка): Строка
    знч ТекстПодтвержденияНажатия = СправочникНапоминаний.ОтменитьНапоминание(
                СправочникНапоминаний.НайтиПоКоду(ИмяКоманды.Заменить("esc_", "")))
                
    возврат ТекстПодтвержденияНажатия
;


@ВПроекте
метод ЭтоКомандаОтмены(ИмяКоманды: Строка): Булево
    возврат ИмяКоманды.НачинаетсяС("esc")
;


@ВПроекте
метод ЭтоКомандаПродления(ИмяКоманды: Строка): Булево
    возврат ВариантыПродления().СодержитКлюч(ИмяКоманды)
;



@ВПроекте
метод ВариантыПродленияДляРазбора(): Соответствие<Строка, Строка>
    // варианты продления для разбора выражения, пока просто совпадают
    возврат новый Соответствие(ВариантыПродления())
;


@Локально
метод ВариантыПродления(): Соответствие<Строка, Строка>
    // отображение вариантов в телеграм-боте
    возврат {
        "m5": "Через 5 минут.",
        "m10": "Через 10 минут.",
        "m15": "Через 15 минут.",
        "m30": "Через полчаса.",
        "h1": "Через час.",
        "h2": "Через 2 часа.",
        "h3": "Через 3 часа.",
        "h24": "Через сутки."
    }
;


/* @ВПроекте
перечисление ВидыКлавиатуры
    НеПоказывать,
    Продление,
    Подтверждение
;
 */

@Локально
структура КнопкаКоманда
    пер text: Строка
    пер callback_data: Строка?
;


@Локально
структура КнопкаСсылка
    пер text: Строка
    пер url: Строка?
;


@ВПроекте
метод ПолучитьКлавиатуруПродление(): Строка
    знч Вар = ВариантыПродления()
    пер Ключ: Строка

    пер Клавиатура = новый Соответствие<Строка, Массив<Массив<КнопкаКоманда>>>()

    пер КнопкиСтр1 = новый Массив<КнопкаКоманда>()
    Ключ = "m5"
    КнопкиСтр1.Добавить(новый КнопкаКоманда(text = Вар[Ключ], callback_data = Ключ))
    Ключ = "m10"
    КнопкиСтр1.Добавить(новый КнопкаКоманда(text = Вар[Ключ], callback_data = Ключ))
    Ключ = "m15"
    КнопкиСтр1.Добавить(новый КнопкаКоманда(text = Вар[Ключ], callback_data = Ключ))
    Ключ = "m30"
    КнопкиСтр1.Добавить(новый КнопкаКоманда(text = Вар[Ключ], callback_data = Ключ))

    пер КнопкиСтр2 = новый Массив<КнопкаКоманда>()
    Ключ = "h1"
    КнопкиСтр2.Добавить(новый КнопкаКоманда(text = Вар[Ключ], callback_data = Ключ))
    Ключ = "h2"
    КнопкиСтр2.Добавить(новый КнопкаКоманда(text = Вар[Ключ], callback_data = Ключ))
    Ключ = "h3"
    КнопкиСтр2.Добавить(новый КнопкаКоманда(text = Вар[Ключ], callback_data = Ключ))
    Ключ = "h24"
    КнопкиСтр2.Добавить(новый КнопкаКоманда(text = Вар[Ключ], callback_data = Ключ))

    Клавиатура.Вставить("inline_keyboard", [КнопкиСтр1, КнопкиСтр2])

    знч Результат = СериализацияJson.ЗаписатьОбъект(Клавиатура)

    возврат Результат
;


@ВПроекте
метод ПолучитьКлавиатуруПодтверждение(КодНапоминания: Строка): Строка

    //пер К: КнопкаКоманда|КнопкаСсылка

    пер Клавиатура = новый Соответствие<Строка, Массив<Массив<КнопкаКоманда|КнопкаСсылка>>>()

    пер КнопкиСтр1 = новый Массив<КнопкаКоманда|КнопкаСсылка>()
    //КнопкиСтр1.Добавить(новый КнопкаСсылка(text = "Открыть ссылку", url = "%{ПолучитьАдресПриложения()}"))
    КнопкиСтр1.Добавить(новый КнопкаКоманда(text = "Отменить", callback_data = "esc_%КодНапоминания"))

    Клавиатура.Вставить("inline_keyboard", [КнопкиСтр1])

    знч Результат = СериализацияJson.ЗаписатьОбъект(Клавиатура)

    возврат Результат
;

@ВПроекте
метод ПолучитьКлавиатуруСписокНапоминаний(Данные: Массив<СтруктураПолученныхПолей>): Строка
    пер Клавиатура = новый Соответствие<Строка, Массив<Массив<КнопкаКоманда>>>()

    пер Кнопки = новый Массив<Массив<КнопкаКоманда>>()
    
    для Элем из Данные
        Кнопки.Добавить([новый КнопкаКоманда(text = "${Элем.ДатаНапоминания|дд.ММ.гггг ЧЧ:мм}, %{Элем.СтрокаИсходная}", callback_data = "esc_%{Элем.Код}")])
    ;
    
    Клавиатура.Вставить("inline_keyboard", Кнопки)

    знч Результат = СериализацияJson.ЗаписатьОбъект(Клавиатура)

    возврат Результат
;


/* @ВПроекте
метод ПолучитьКлавиатуруОткрытиеСсылки(): Строка

    //пер К: КнопкаКоманда|КнопкаСсылка

    пер Клавиатура = новый Соответствие<Строка, Массив<Массив<КнопкаКоманда|КнопкаСсылка>>>()

    пер КнопкиСтр1 = новый Массив<КнопкаКоманда|КнопкаСсылка>()
    КнопкиСтр1.Добавить(новый КнопкаСсылка(text = "Открыть ссылку", url = "%{ПолучитьАдресПриложения()}"))

    Клавиатура.Вставить("inline_keyboard", [КнопкиСтр1])

    знч Результат = СериализацияJson.ЗаписатьОбъект(Клавиатура)

    возврат Результат
;
 */

/*
 * @Локально
 * метод ПолучитьОбычнуюКлавиатуруУдаление(): Строка
 *     пер Клавиатура = новый Соответствие<Строка, Булево>()
 *     Клавиатура.Вставить("remove_keyboard", Истина)

 *     знч Результат = СериализацияJson.ЗаписатьОбъект(Клавиатура)

 *     возврат Результат
 * ;
 */
 
@ВПроекте
метод СкачатьИРазобратьРечь(ИдФайла: Строка): Строка
    знч Токен = ПолучитьТокен()

    //Пауза(1с)

    пер URL = "%{URL_TELEGRAM}/bot%Токен/getFile"

    знч Запрос = КлиентHttp.ЗапросGet(URL)
        .ДобавитьПараметрЗапроса("file_id", ИдФайла)
    исп Ответ = Запрос.Выполнить()

    знч ЧтениеJson = new ЧтениеJson(Ответ.Тело.ПрочитатьКакСтроку())
    знч ТелоКакСоответствие = ЧтениеJson.ПрочитатьСодержимоеКакСоответствие()
    пер ПутьРез = ТелоКакСоответствие.Получить("result") как Соответствие<Строка, Объект?>
    пер Путь = ПутьРез.Получить("file_path") как Строка

    URL = "%{URL_TELEGRAM}/file/bot%Токен/%Путь"

    знч Запрос2 = КлиентHttp.ЗапросGet(URL)
    исп Ответ2 = Запрос2.Выполнить()

    знч Размер = Ответ2.Заголовки.ПолучитьПервый("Content-Length")
    знч ТипСодержимого = Ответ2.Заголовки.ПолучитьПервый("Content-Type")

    // Загрузить двоичные данные в хранилище.
    знч Звук: ДвоичныйОбъект = ОбъектноеХранилище.Загрузить(Ответ2.Тело, новый Число(Размер), ТипСодержимого)

    возврат РазобратьРечь(Звук)
;


@ВПроекте
метод ПолучитьСберТокен(): Строка
    знч Ключ = ПолучитьКлючАвторизации()

    пер URL = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"

    пер Запрос = КлиентHttp.ЗапросPost(URL)
        .ДобавитьЗаголовок("Content-Type", "application/x-www-form-urlencoded")      
        .ДобавитьЗаголовок("Accept", "application/json")
        .ДобавитьЗаголовок("RqUID", "%{новый Ууид()}")
        .ДобавитьЗаголовок("Authorization", "Basic %Ключ")
        .УстановитьТело("scope=SALUTE_SPEECH_PERS")

    исп Ответ = Запрос.Выполнить()
    знч ТелоЗапроса = Ответ.Тело.ПрочитатьКакСтроку()
    знч ЧтениеJson = new ЧтениеJson(ТелоЗапроса)
    знч ТелоКакСоответствие = ЧтениеJson.ПрочитатьСодержимоеКакСоответствие()
    возврат ТелоКакСоответствие["access_token"] как Строка
;


@ВПроекте
метод РазобратьРечь(Звук: ДвоичныйОбъект): Строка
    пер URL = "https://smartspeech.sber.ru/rest/v1/speech:recognize"

    пер Запрос = КлиентHttp.ЗапросPost(URL)
        .ДобавитьЗаголовок("Content-Type", "audio/ogg;codecs=opus")      
        .ДобавитьЗаголовок("Accept", "application/json")
        .ДобавитьЗаголовок("Authorization", "Bearer %{ПолучитьСберТокен()}")
    //.ДобавитьЗаголовок("Content-Length", Звук.Размер.ВБайтах())

    исп Поток = Звук.ОткрытьПотокЧтения()
    Запрос.УстановитьТело(Поток)

    исп Ответ = Запрос.Выполнить()

    Поток.Закрыть()

    знч ТелоЗапроса = Ответ.Тело.ПрочитатьКакСтроку()

    Ответ.Закрыть()
    
    знч ЧтениеJson = new ЧтениеJson(ТелоЗапроса)
    знч ТелоКакСоответствие = ЧтениеJson.ПрочитатьСодержимоеКакСоответствие()

    пер ИтоговаяСтрока = ""

    если ТелоКакСоответствие.СодержитКлюч("result")
        знч Рез = ТелоКакСоответствие.Получить("result") как Array<Object?>
        ИтоговаяСтрока = Рез.ПервыйИлиУмолчание() как Строка
    ;

    //    возврат ТелоКакСоответствие["access_token"]  как Строка
    возврат ИтоговаяСтрока
;

// curl -L -X POST 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth' -H 'Content-Type: application/x-www-form-urlencoded' -H 'Accept: application/json' -H 'RqUID: 4fadbe99-84bf-4bae-8bc3-71bad17dfae5' -H 'Authorization: Basic <Authorization key>' --data-urlencode 'scope= SALUTE_SPEECH_PERS'

